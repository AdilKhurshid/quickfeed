// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kit/score/score.proto

package score

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Score give the score for a single test named TestName.
type Score struct {
	Secret               string   `protobuf:"bytes,1,opt,name=Secret,proto3" json:"Secret,omitempty"`
	TestName             string   `protobuf:"bytes,2,opt,name=TestName,proto3" json:"TestName,omitempty"`
	Score                int32    `protobuf:"varint,3,opt,name=Score,proto3" json:"Score,omitempty"`
	MaxScore             int32    `protobuf:"varint,4,opt,name=MaxScore,proto3" json:"MaxScore,omitempty"`
	Weight               int32    `protobuf:"varint,5,opt,name=Weight,proto3" json:"Weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Score) Reset()         { *m = Score{} }
func (m *Score) String() string { return proto.CompactTextString(m) }
func (*Score) ProtoMessage()    {}
func (*Score) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d8194de88238c22, []int{0}
}
func (m *Score) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Score) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Score.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Score) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Score.Merge(m, src)
}
func (m *Score) XXX_Size() int {
	return m.Size()
}
func (m *Score) XXX_DiscardUnknown() {
	xxx_messageInfo_Score.DiscardUnknown(m)
}

var xxx_messageInfo_Score proto.InternalMessageInfo

func (m *Score) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *Score) GetTestName() string {
	if m != nil {
		return m.TestName
	}
	return ""
}

func (m *Score) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Score) GetMaxScore() int32 {
	if m != nil {
		return m.MaxScore
	}
	return 0
}

func (m *Score) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

// Results holds a map from test names to score objects and build info.
type Results struct {
	BuildInfo            *BuildInfo        `protobuf:"bytes,1,opt,name=BuildInfo,proto3" json:"BuildInfo,omitempty"`
	TestNames            []string          `protobuf:"bytes,2,rep,name=TestNames,proto3" json:"TestNames,omitempty"`
	ScoreMap             map[string]*Score `protobuf:"bytes,3,rep,name=ScoreMap,proto3" json:"ScoreMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Results) Reset()         { *m = Results{} }
func (m *Results) String() string { return proto.CompactTextString(m) }
func (*Results) ProtoMessage()    {}
func (*Results) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d8194de88238c22, []int{1}
}
func (m *Results) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Results) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Results.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Results) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Results.Merge(m, src)
}
func (m *Results) XXX_Size() int {
	return m.Size()
}
func (m *Results) XXX_DiscardUnknown() {
	xxx_messageInfo_Results.DiscardUnknown(m)
}

var xxx_messageInfo_Results proto.InternalMessageInfo

func (m *Results) GetBuildInfo() *BuildInfo {
	if m != nil {
		return m.BuildInfo
	}
	return nil
}

func (m *Results) GetTestNames() []string {
	if m != nil {
		return m.TestNames
	}
	return nil
}

func (m *Results) GetScoreMap() map[string]*Score {
	if m != nil {
		return m.ScoreMap
	}
	return nil
}

// BuildInfo holds build data for an assignment's test execution.
type BuildInfo struct {
	BuildID              int64    `protobuf:"varint,1,opt,name=BuildID,proto3" json:"BuildID,omitempty"`
	BuildDate            string   `protobuf:"bytes,2,opt,name=BuildDate,proto3" json:"BuildDate,omitempty"`
	BuildLog             string   `protobuf:"bytes,3,opt,name=BuildLog,proto3" json:"BuildLog,omitempty"`
	ExecTime             int64    `protobuf:"varint,4,opt,name=ExecTime,proto3" json:"ExecTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildInfo) Reset()         { *m = BuildInfo{} }
func (m *BuildInfo) String() string { return proto.CompactTextString(m) }
func (*BuildInfo) ProtoMessage()    {}
func (*BuildInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d8194de88238c22, []int{2}
}
func (m *BuildInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuildInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuildInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildInfo.Merge(m, src)
}
func (m *BuildInfo) XXX_Size() int {
	return m.Size()
}
func (m *BuildInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BuildInfo proto.InternalMessageInfo

func (m *BuildInfo) GetBuildID() int64 {
	if m != nil {
		return m.BuildID
	}
	return 0
}

func (m *BuildInfo) GetBuildDate() string {
	if m != nil {
		return m.BuildDate
	}
	return ""
}

func (m *BuildInfo) GetBuildLog() string {
	if m != nil {
		return m.BuildLog
	}
	return ""
}

func (m *BuildInfo) GetExecTime() int64 {
	if m != nil {
		return m.ExecTime
	}
	return 0
}

func init() {
	proto.RegisterType((*Score)(nil), "score.Score")
	proto.RegisterType((*Results)(nil), "score.Results")
	proto.RegisterMapType((map[string]*Score)(nil), "score.Results.ScoreMapEntry")
	proto.RegisterType((*BuildInfo)(nil), "score.BuildInfo")
}

func init() { proto.RegisterFile("kit/score/score.proto", fileDescriptor_1d8194de88238c22) }

var fileDescriptor_1d8194de88238c22 = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0xcf, 0x6a, 0x2a, 0x31,
	0x14, 0xc6, 0x89, 0xb9, 0xa3, 0x4e, 0xbc, 0x17, 0x24, 0xdc, 0x96, 0x20, 0x22, 0xc3, 0xac, 0x66,
	0x35, 0x03, 0x16, 0x8a, 0x74, 0x29, 0xba, 0x10, 0x6a, 0x17, 0x51, 0x28, 0x74, 0x17, 0xc7, 0x38,
	0x0e, 0xfe, 0x89, 0x9d, 0xc9, 0x14, 0xa5, 0xeb, 0xbe, 0x5b, 0x97, 0x7d, 0x80, 0x2e, 0x8a, 0x4f,
	0x52, 0x26, 0xc9, 0xc4, 0x76, 0x13, 0xce, 0xef, 0x7c, 0xc9, 0x39, 0x27, 0x1f, 0x07, 0x5d, 0x6d,
	0x52, 0x19, 0xe5, 0xb1, 0xc8, 0xb8, 0x3e, 0xc3, 0x43, 0x26, 0xa4, 0xc0, 0x8e, 0x02, 0xff, 0x0d,
	0x20, 0x67, 0x56, 0x46, 0xf8, 0x1a, 0xd5, 0x67, 0x3c, 0xce, 0xb8, 0x24, 0xc0, 0x03, 0x81, 0x4b,
	0x0d, 0xe1, 0x0e, 0x6a, 0xce, 0x79, 0x2e, 0x1f, 0xd8, 0x8e, 0x93, 0x9a, 0x52, 0x2c, 0xe3, 0xff,
	0xe6, 0x31, 0x81, 0x1e, 0x08, 0x1c, 0x6a, 0x2a, 0x75, 0x50, 0x73, 0xca, 0x8e, 0x5a, 0xf8, 0xa3,
	0x04, 0xcb, 0x65, 0x97, 0x47, 0x9e, 0x26, 0x6b, 0x49, 0x1c, 0xa5, 0x18, 0xf2, 0x3f, 0x01, 0x6a,
	0x50, 0x9e, 0x17, 0x5b, 0x99, 0xe3, 0x10, 0xb9, 0xc3, 0x22, 0xdd, 0x2e, 0x27, 0xfb, 0x95, 0x50,
	0xc3, 0xb4, 0xfa, 0xed, 0x50, 0xcf, 0x6e, 0xf3, 0xf4, 0x72, 0x05, 0x77, 0x91, 0x5b, 0x4d, 0x94,
	0x93, 0x9a, 0x07, 0x03, 0x97, 0x5e, 0x12, 0x78, 0x80, 0x9a, 0xaa, 0xf5, 0x94, 0x1d, 0x08, 0xf4,
	0x60, 0xd0, 0xea, 0x77, 0x4d, 0x31, 0xd3, 0x2f, 0xac, 0xe4, 0xf1, 0x5e, 0x66, 0x27, 0x6a, 0x6f,
	0x77, 0x26, 0xe8, 0xdf, 0x2f, 0x09, 0xb7, 0x11, 0xdc, 0xf0, 0x93, 0xf1, 0xa7, 0x0c, 0xb1, 0x8f,
	0x9c, 0x17, 0xb6, 0x2d, 0xb4, 0x33, 0xad, 0xfe, 0x5f, 0x53, 0x59, 0x3d, 0xa3, 0x5a, 0xba, 0xab,
	0x0d, 0x80, 0xff, 0xfa, 0xe3, 0x4b, 0x98, 0xa0, 0x86, 0x86, 0x91, 0x2a, 0x05, 0x69, 0x85, 0xe5,
	0x4f, 0x54, 0x38, 0x62, 0xb2, 0x32, 0xfb, 0x92, 0x28, 0x7d, 0x55, 0x70, 0x2f, 0x12, 0x65, 0xb8,
	0x4b, 0x2d, 0x97, 0xda, 0xf8, 0xc8, 0xe3, 0x79, 0xba, 0xd3, 0x9e, 0x43, 0x6a, 0x79, 0x78, 0xfb,
	0x7e, 0xee, 0x81, 0x8f, 0x73, 0x0f, 0x7c, 0x9d, 0x7b, 0xe0, 0x29, 0x48, 0x52, 0xb9, 0x2e, 0x16,
	0x61, 0x2c, 0x76, 0x11, 0x2b, 0xa4, 0x48, 0x32, 0xb6, 0xe4, 0xd1, 0x73, 0x91, 0xc6, 0x9b, 0x15,
	0xe7, 0xcb, 0xc8, 0xae, 0xcb, 0xa2, 0xae, 0x36, 0xe5, 0xe6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xcc,
	0x1b, 0xc7, 0xd3, 0x42, 0x02, 0x00, 0x00,
}

func (m *Score) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Score) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Score) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Weight != 0 {
		i = encodeVarintScore(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxScore != 0 {
		i = encodeVarintScore(dAtA, i, uint64(m.MaxScore))
		i--
		dAtA[i] = 0x20
	}
	if m.Score != 0 {
		i = encodeVarintScore(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TestName) > 0 {
		i -= len(m.TestName)
		copy(dAtA[i:], m.TestName)
		i = encodeVarintScore(dAtA, i, uint64(len(m.TestName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintScore(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Results) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Results) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Results) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ScoreMap) > 0 {
		for k := range m.ScoreMap {
			v := m.ScoreMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintScore(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintScore(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintScore(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TestNames) > 0 {
		for iNdEx := len(m.TestNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TestNames[iNdEx])
			copy(dAtA[i:], m.TestNames[iNdEx])
			i = encodeVarintScore(dAtA, i, uint64(len(m.TestNames[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BuildInfo != nil {
		{
			size, err := m.BuildInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExecTime != 0 {
		i = encodeVarintScore(dAtA, i, uint64(m.ExecTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BuildLog) > 0 {
		i -= len(m.BuildLog)
		copy(dAtA[i:], m.BuildLog)
		i = encodeVarintScore(dAtA, i, uint64(len(m.BuildLog)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BuildDate) > 0 {
		i -= len(m.BuildDate)
		copy(dAtA[i:], m.BuildDate)
		i = encodeVarintScore(dAtA, i, uint64(len(m.BuildDate)))
		i--
		dAtA[i] = 0x12
	}
	if m.BuildID != 0 {
		i = encodeVarintScore(dAtA, i, uint64(m.BuildID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintScore(dAtA []byte, offset int, v uint64) int {
	offset -= sovScore(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Score) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovScore(uint64(l))
	}
	l = len(m.TestName)
	if l > 0 {
		n += 1 + l + sovScore(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovScore(uint64(m.Score))
	}
	if m.MaxScore != 0 {
		n += 1 + sovScore(uint64(m.MaxScore))
	}
	if m.Weight != 0 {
		n += 1 + sovScore(uint64(m.Weight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Results) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuildInfo != nil {
		l = m.BuildInfo.Size()
		n += 1 + l + sovScore(uint64(l))
	}
	if len(m.TestNames) > 0 {
		for _, s := range m.TestNames {
			l = len(s)
			n += 1 + l + sovScore(uint64(l))
		}
	}
	if len(m.ScoreMap) > 0 {
		for k, v := range m.ScoreMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovScore(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovScore(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovScore(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BuildInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuildID != 0 {
		n += 1 + sovScore(uint64(m.BuildID))
	}
	l = len(m.BuildDate)
	if l > 0 {
		n += 1 + l + sovScore(uint64(l))
	}
	l = len(m.BuildLog)
	if l > 0 {
		n += 1 + l + sovScore(uint64(l))
	}
	if m.ExecTime != 0 {
		n += 1 + sovScore(uint64(m.ExecTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovScore(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozScore(x uint64) (n int) {
	return sovScore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Score) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Score: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Score: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxScore", wireType)
			}
			m.MaxScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxScore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Results) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Results: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Results: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BuildInfo == nil {
				m.BuildInfo = &BuildInfo{}
			}
			if err := m.BuildInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestNames = append(m.TestNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScoreMap == nil {
				m.ScoreMap = make(map[string]*Score)
			}
			var mapkey string
			var mapvalue *Score
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScore
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScore
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthScore
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthScore
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScore
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthScore
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthScore
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Score{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipScore(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthScore
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ScoreMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildID", wireType)
			}
			m.BuildID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildLog", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildLog = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecTime", wireType)
			}
			m.ExecTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthScore
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupScore
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthScore
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthScore        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScore          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupScore = fmt.Errorf("proto: unexpected end of group")
)
