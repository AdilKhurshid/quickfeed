// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ag.proto

package ag

import (
	context "context"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	protobuf "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Group_GroupStatus int32

const (
	Group_PENDING_GROUP  Group_GroupStatus = 0
	Group_REJECTED_GROUP Group_GroupStatus = 1
	Group_APPROVED       Group_GroupStatus = 2
	Group_DELETED        Group_GroupStatus = 3
)

var Group_GroupStatus_name = map[int32]string{
	0: "PENDING_GROUP",
	1: "REJECTED_GROUP",
	2: "APPROVED",
	3: "DELETED",
}

var Group_GroupStatus_value = map[string]int32{
	"PENDING_GROUP":  0,
	"REJECTED_GROUP": 1,
	"APPROVED":       2,
	"DELETED":        3,
}

func (x Group_GroupStatus) String() string {
	return proto.EnumName(Group_GroupStatus_name, int32(x))
}

func (Group_GroupStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{3, 0}
}

type Enrollment_UserStatus int32

const (
	Enrollment_PENDING  Enrollment_UserStatus = 0
	Enrollment_REJECTED Enrollment_UserStatus = 1
	Enrollment_STUDENT  Enrollment_UserStatus = 2
	Enrollment_TEACHER  Enrollment_UserStatus = 3
)

var Enrollment_UserStatus_name = map[int32]string{
	0: "PENDING",
	1: "REJECTED",
	2: "STUDENT",
	3: "TEACHER",
}

var Enrollment_UserStatus_value = map[string]int32{
	"PENDING":  0,
	"REJECTED": 1,
	"STUDENT":  2,
	"TEACHER":  3,
}

func (x Enrollment_UserStatus) String() string {
	return proto.EnumName(Enrollment_UserStatus_name, int32(x))
}

func (Enrollment_UserStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{7, 0}
}

type Repository_RepoType int32

const (
	Repository_USER       Repository_RepoType = 0
	Repository_ASSIGNMENT Repository_RepoType = 1
	Repository_TESTS      Repository_RepoType = 2
	Repository_SOLUTION   Repository_RepoType = 3
	Repository_COURSEINFO Repository_RepoType = 4
)

var Repository_RepoType_name = map[int32]string{
	0: "USER",
	1: "ASSIGNMENT",
	2: "TESTS",
	3: "SOLUTION",
	4: "COURSEINFO",
}

var Repository_RepoType_value = map[string]int32{
	"USER":       0,
	"ASSIGNMENT": 1,
	"TESTS":      2,
	"SOLUTION":   3,
	"COURSEINFO": 4,
}

func (x Repository_RepoType) String() string {
	return proto.EnumName(Repository_RepoType_name, int32(x))
}

func (Repository_RepoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{13, 0}
}

type User struct {
	Id                   uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsAdmin              bool              `protobuf:"varint,2,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	Name                 string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	StudentId            string            `protobuf:"bytes,4,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	Email                string            `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	AvatarUrl            string            `protobuf:"bytes,6,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	RemoteIdentities     []*RemoteIdentity `protobuf:"bytes,7,rep,name=remote_identities,json=remoteIdentities,proto3" json:"remote_identities,omitempty"`
	Enrollments          []*Enrollment     `protobuf:"bytes,8,rep,name=enrollments,proto3" json:"enrollments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *User) GetRemoteIdentities() []*RemoteIdentity {
	if m != nil {
		return m.RemoteIdentities
	}
	return nil
}

func (m *User) GetEnrollments() []*Enrollment {
	if m != nil {
		return m.Enrollments
	}
	return nil
}

type Users struct {
	Users                []*User  `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Users) Reset()         { *m = Users{} }
func (m *Users) String() string { return proto.CompactTextString(m) }
func (*Users) ProtoMessage()    {}
func (*Users) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{1}
}
func (m *Users) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Users.Unmarshal(m, b)
}
func (m *Users) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Users.Marshal(b, m, deterministic)
}
func (m *Users) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Users.Merge(m, src)
}
func (m *Users) XXX_Size() int {
	return xxx_messageInfo_Users.Size(m)
}
func (m *Users) XXX_DiscardUnknown() {
	xxx_messageInfo_Users.DiscardUnknown(m)
}

var xxx_messageInfo_Users proto.InternalMessageInfo

func (m *Users) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type RemoteIdentity struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Provider             string   `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty" gorm:"unique_index:uid_provider_remote_id"`
	RemoteId             uint64   `protobuf:"varint,3,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty" gorm:"unique_index:uid_provider_remote_id"`
	AccessToken          string   `protobuf:"bytes,4,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	UserId               uint64   `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoteIdentity) Reset()         { *m = RemoteIdentity{} }
func (m *RemoteIdentity) String() string { return proto.CompactTextString(m) }
func (*RemoteIdentity) ProtoMessage()    {}
func (*RemoteIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{2}
}
func (m *RemoteIdentity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoteIdentity.Unmarshal(m, b)
}
func (m *RemoteIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoteIdentity.Marshal(b, m, deterministic)
}
func (m *RemoteIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteIdentity.Merge(m, src)
}
func (m *RemoteIdentity) XXX_Size() int {
	return xxx_messageInfo_RemoteIdentity.Size(m)
}
func (m *RemoteIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteIdentity proto.InternalMessageInfo

func (m *RemoteIdentity) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RemoteIdentity) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *RemoteIdentity) GetRemoteId() uint64 {
	if m != nil {
		return m.RemoteId
	}
	return 0
}

func (m *RemoteIdentity) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *RemoteIdentity) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type Group struct {
	Id                   uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" gorm:"unique_index:idx_unique_group_name"`
	CourseId             uint64            `protobuf:"varint,3,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty" gorm:"unique_index:idx_unique_group_name"`
	Status               Group_GroupStatus `protobuf:"varint,4,opt,name=status,proto3,enum=Group_GroupStatus" json:"status,omitempty"`
	Users                []*User           `protobuf:"bytes,5,rep,name=users,proto3" json:"users,omitempty"`
	Enrollments          []*Enrollment     `protobuf:"bytes,6,rep,name=enrollments,proto3" json:"enrollments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{3}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Group.Unmarshal(m, b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Group.Marshal(b, m, deterministic)
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return xxx_messageInfo_Group.Size(m)
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Group) GetCourseId() uint64 {
	if m != nil {
		return m.CourseId
	}
	return 0
}

func (m *Group) GetStatus() Group_GroupStatus {
	if m != nil {
		return m.Status
	}
	return Group_PENDING_GROUP
}

func (m *Group) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Group) GetEnrollments() []*Enrollment {
	if m != nil {
		return m.Enrollments
	}
	return nil
}

type Groups struct {
	Groups               []*Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Groups) Reset()         { *m = Groups{} }
func (m *Groups) String() string { return proto.CompactTextString(m) }
func (*Groups) ProtoMessage()    {}
func (*Groups) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{4}
}
func (m *Groups) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Groups.Unmarshal(m, b)
}
func (m *Groups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Groups.Marshal(b, m, deterministic)
}
func (m *Groups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Groups.Merge(m, src)
}
func (m *Groups) XXX_Size() int {
	return xxx_messageInfo_Groups.Size(m)
}
func (m *Groups) XXX_DiscardUnknown() {
	xxx_messageInfo_Groups.DiscardUnknown(m)
}

var xxx_messageInfo_Groups proto.InternalMessageInfo

func (m *Groups) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type Course struct {
	Id                   uint64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CoursecreatorId      uint64                `protobuf:"varint,2,opt,name=coursecreator_id,json=coursecreatorId,proto3" json:"coursecreator_id,omitempty"`
	Name                 string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Code                 string                `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Year                 uint32                `protobuf:"varint,5,opt,name=year,proto3" json:"year,omitempty"`
	Tag                  string                `protobuf:"bytes,6,opt,name=tag,proto3" json:"tag,omitempty"`
	Provider             string                `protobuf:"bytes,7,opt,name=provider,proto3" json:"provider,omitempty"`
	DirectoryId          uint64                `protobuf:"varint,8,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	Enrolled             Enrollment_UserStatus `protobuf:"varint,9,opt,name=enrolled,proto3,enum=Enrollment_UserStatus" json:"enrolled,omitempty"`
	Enrollments          []*Enrollment         `protobuf:"bytes,10,rep,name=enrollments,proto3" json:"enrollments,omitempty"`
	Assignments          []*Assignment         `protobuf:"bytes,12,rep,name=assignments,proto3" json:"assignments,omitempty"`
	Groups               []*Group              `protobuf:"bytes,13,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Course) Reset()         { *m = Course{} }
func (m *Course) String() string { return proto.CompactTextString(m) }
func (*Course) ProtoMessage()    {}
func (*Course) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{5}
}
func (m *Course) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Course.Unmarshal(m, b)
}
func (m *Course) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Course.Marshal(b, m, deterministic)
}
func (m *Course) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Course.Merge(m, src)
}
func (m *Course) XXX_Size() int {
	return xxx_messageInfo_Course.Size(m)
}
func (m *Course) XXX_DiscardUnknown() {
	xxx_messageInfo_Course.DiscardUnknown(m)
}

var xxx_messageInfo_Course proto.InternalMessageInfo

func (m *Course) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Course) GetCoursecreatorId() uint64 {
	if m != nil {
		return m.CoursecreatorId
	}
	return 0
}

func (m *Course) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Course) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Course) GetYear() uint32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *Course) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *Course) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *Course) GetDirectoryId() uint64 {
	if m != nil {
		return m.DirectoryId
	}
	return 0
}

func (m *Course) GetEnrolled() Enrollment_UserStatus {
	if m != nil {
		return m.Enrolled
	}
	return Enrollment_PENDING
}

func (m *Course) GetEnrollments() []*Enrollment {
	if m != nil {
		return m.Enrollments
	}
	return nil
}

func (m *Course) GetAssignments() []*Assignment {
	if m != nil {
		return m.Assignments
	}
	return nil
}

func (m *Course) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type Courses struct {
	Courses              []*Course `protobuf:"bytes,1,rep,name=Courses,proto3" json:"Courses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Courses) Reset()         { *m = Courses{} }
func (m *Courses) String() string { return proto.CompactTextString(m) }
func (*Courses) ProtoMessage()    {}
func (*Courses) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{6}
}
func (m *Courses) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Courses.Unmarshal(m, b)
}
func (m *Courses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Courses.Marshal(b, m, deterministic)
}
func (m *Courses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Courses.Merge(m, src)
}
func (m *Courses) XXX_Size() int {
	return xxx_messageInfo_Courses.Size(m)
}
func (m *Courses) XXX_DiscardUnknown() {
	xxx_messageInfo_Courses.DiscardUnknown(m)
}

var xxx_messageInfo_Courses proto.InternalMessageInfo

func (m *Courses) GetCourses() []*Course {
	if m != nil {
		return m.Courses
	}
	return nil
}

type Enrollment struct {
	Id                   uint64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CourseId             uint64                `protobuf:"varint,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty" gorm:"unique_index:idx_unique_group_name"`
	UserId               uint64                `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" gorm:"unique_index:idx_unique_group_name"`
	GroupId              uint64                `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	User                 *User                 `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Course               *Course               `protobuf:"bytes,6,opt,name=course,proto3" json:"course,omitempty"`
	Group                *Group                `protobuf:"bytes,7,opt,name=group,proto3" json:"group,omitempty"`
	Status               Enrollment_UserStatus `protobuf:"varint,8,opt,name=status,proto3,enum=Enrollment_UserStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Enrollment) Reset()         { *m = Enrollment{} }
func (m *Enrollment) String() string { return proto.CompactTextString(m) }
func (*Enrollment) ProtoMessage()    {}
func (*Enrollment) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{7}
}
func (m *Enrollment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Enrollment.Unmarshal(m, b)
}
func (m *Enrollment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Enrollment.Marshal(b, m, deterministic)
}
func (m *Enrollment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Enrollment.Merge(m, src)
}
func (m *Enrollment) XXX_Size() int {
	return xxx_messageInfo_Enrollment.Size(m)
}
func (m *Enrollment) XXX_DiscardUnknown() {
	xxx_messageInfo_Enrollment.DiscardUnknown(m)
}

var xxx_messageInfo_Enrollment proto.InternalMessageInfo

func (m *Enrollment) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Enrollment) GetCourseId() uint64 {
	if m != nil {
		return m.CourseId
	}
	return 0
}

func (m *Enrollment) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Enrollment) GetGroupId() uint64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *Enrollment) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Enrollment) GetCourse() *Course {
	if m != nil {
		return m.Course
	}
	return nil
}

func (m *Enrollment) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *Enrollment) GetStatus() Enrollment_UserStatus {
	if m != nil {
		return m.Status
	}
	return Enrollment_PENDING
}

type Enrollments struct {
	Enrollments          []*Enrollment `protobuf:"bytes,1,rep,name=enrollments,proto3" json:"enrollments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Enrollments) Reset()         { *m = Enrollments{} }
func (m *Enrollments) String() string { return proto.CompactTextString(m) }
func (*Enrollments) ProtoMessage()    {}
func (*Enrollments) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{8}
}
func (m *Enrollments) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Enrollments.Unmarshal(m, b)
}
func (m *Enrollments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Enrollments.Marshal(b, m, deterministic)
}
func (m *Enrollments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Enrollments.Merge(m, src)
}
func (m *Enrollments) XXX_Size() int {
	return xxx_messageInfo_Enrollments.Size(m)
}
func (m *Enrollments) XXX_DiscardUnknown() {
	xxx_messageInfo_Enrollments.DiscardUnknown(m)
}

var xxx_messageInfo_Enrollments proto.InternalMessageInfo

func (m *Enrollments) GetEnrollments() []*Enrollment {
	if m != nil {
		return m.Enrollments
	}
	return nil
}

type Assignment struct {
	Id                   uint64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CourseId             uint64              `protobuf:"varint,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	Name                 string              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Language             string              `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	Deadline             *protobuf.Timestamp `protobuf:"bytes,5,opt,name=deadline,proto3" json:"deadline,omitempty"`
	AutoApprove          bool                `protobuf:"varint,6,opt,name=auto_approve,json=autoApprove,proto3" json:"auto_approve,omitempty"`
	Order                uint32              `protobuf:"varint,7,opt,name=order,proto3" json:"order,omitempty"`
	IsGrouplab           bool                `protobuf:"varint,8,opt,name=is_grouplab,json=isGrouplab,proto3" json:"is_grouplab,omitempty"`
	Submission           *Submission         `protobuf:"bytes,9,opt,name=submission,proto3" json:"submission,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Assignment) Reset()         { *m = Assignment{} }
func (m *Assignment) String() string { return proto.CompactTextString(m) }
func (*Assignment) ProtoMessage()    {}
func (*Assignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{9}
}
func (m *Assignment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Assignment.Unmarshal(m, b)
}
func (m *Assignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Assignment.Marshal(b, m, deterministic)
}
func (m *Assignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Assignment.Merge(m, src)
}
func (m *Assignment) XXX_Size() int {
	return xxx_messageInfo_Assignment.Size(m)
}
func (m *Assignment) XXX_DiscardUnknown() {
	xxx_messageInfo_Assignment.DiscardUnknown(m)
}

var xxx_messageInfo_Assignment proto.InternalMessageInfo

func (m *Assignment) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Assignment) GetCourseId() uint64 {
	if m != nil {
		return m.CourseId
	}
	return 0
}

func (m *Assignment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Assignment) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Assignment) GetDeadline() *protobuf.Timestamp {
	if m != nil {
		return m.Deadline
	}
	return nil
}

func (m *Assignment) GetAutoApprove() bool {
	if m != nil {
		return m.AutoApprove
	}
	return false
}

func (m *Assignment) GetOrder() uint32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *Assignment) GetIsGrouplab() bool {
	if m != nil {
		return m.IsGrouplab
	}
	return false
}

func (m *Assignment) GetSubmission() *Submission {
	if m != nil {
		return m.Submission
	}
	return nil
}

type Assignments struct {
	Assignments          []*Assignment `protobuf:"bytes,1,rep,name=assignments,proto3" json:"assignments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Assignments) Reset()         { *m = Assignments{} }
func (m *Assignments) String() string { return proto.CompactTextString(m) }
func (*Assignments) ProtoMessage()    {}
func (*Assignments) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{10}
}
func (m *Assignments) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Assignments.Unmarshal(m, b)
}
func (m *Assignments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Assignments.Marshal(b, m, deterministic)
}
func (m *Assignments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Assignments.Merge(m, src)
}
func (m *Assignments) XXX_Size() int {
	return xxx_messageInfo_Assignments.Size(m)
}
func (m *Assignments) XXX_DiscardUnknown() {
	xxx_messageInfo_Assignments.DiscardUnknown(m)
}

var xxx_messageInfo_Assignments proto.InternalMessageInfo

func (m *Assignments) GetAssignments() []*Assignment {
	if m != nil {
		return m.Assignments
	}
	return nil
}

type Submission struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AssignmentId         uint64   `protobuf:"varint,2,opt,name=assignment_id,json=assignmentId,proto3" json:"assignment_id,omitempty"`
	UserId               uint64   `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId              uint64   `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Score                uint32   `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	ScoreObjects         string   `protobuf:"bytes,6,opt,name=score_objects,json=scoreObjects,proto3" json:"score_objects,omitempty"`
	BuildInfo            string   `protobuf:"bytes,7,opt,name=build_info,json=buildInfo,proto3" json:"build_info,omitempty"`
	CommitHash           string   `protobuf:"bytes,8,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	Approved             bool     `protobuf:"varint,9,opt,name=approved,proto3" json:"approved,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Submission) Reset()         { *m = Submission{} }
func (m *Submission) String() string { return proto.CompactTextString(m) }
func (*Submission) ProtoMessage()    {}
func (*Submission) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{11}
}
func (m *Submission) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Submission.Unmarshal(m, b)
}
func (m *Submission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Submission.Marshal(b, m, deterministic)
}
func (m *Submission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Submission.Merge(m, src)
}
func (m *Submission) XXX_Size() int {
	return xxx_messageInfo_Submission.Size(m)
}
func (m *Submission) XXX_DiscardUnknown() {
	xxx_messageInfo_Submission.DiscardUnknown(m)
}

var xxx_messageInfo_Submission proto.InternalMessageInfo

func (m *Submission) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Submission) GetAssignmentId() uint64 {
	if m != nil {
		return m.AssignmentId
	}
	return 0
}

func (m *Submission) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Submission) GetGroupId() uint64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *Submission) GetScore() uint32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Submission) GetScoreObjects() string {
	if m != nil {
		return m.ScoreObjects
	}
	return ""
}

func (m *Submission) GetBuildInfo() string {
	if m != nil {
		return m.BuildInfo
	}
	return ""
}

func (m *Submission) GetCommitHash() string {
	if m != nil {
		return m.CommitHash
	}
	return ""
}

func (m *Submission) GetApproved() bool {
	if m != nil {
		return m.Approved
	}
	return false
}

type Submissions struct {
	Submissions          []*Submission `protobuf:"bytes,1,rep,name=submissions,proto3" json:"submissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Submissions) Reset()         { *m = Submissions{} }
func (m *Submissions) String() string { return proto.CompactTextString(m) }
func (*Submissions) ProtoMessage()    {}
func (*Submissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{12}
}
func (m *Submissions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Submissions.Unmarshal(m, b)
}
func (m *Submissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Submissions.Marshal(b, m, deterministic)
}
func (m *Submissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Submissions.Merge(m, src)
}
func (m *Submissions) XXX_Size() int {
	return xxx_messageInfo_Submissions.Size(m)
}
func (m *Submissions) XXX_DiscardUnknown() {
	xxx_messageInfo_Submissions.DiscardUnknown(m)
}

var xxx_messageInfo_Submissions proto.InternalMessageInfo

func (m *Submissions) GetSubmissions() []*Submission {
	if m != nil {
		return m.Submissions
	}
	return nil
}

type Repository struct {
	Id                   uint64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DirectoryId          uint64              `protobuf:"varint,2,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	RepositoryId         uint64              `protobuf:"varint,3,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	UserId               uint64              `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId              uint64              `protobuf:"varint,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	HtmlUrl              string              `protobuf:"bytes,6,opt,name=html_url,json=htmlUrl,proto3" json:"html_url,omitempty"`
	RepoType             Repository_RepoType `protobuf:"varint,7,opt,name=repo_type,json=repoType,proto3,enum=Repository_RepoType" json:"repo_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Repository) Reset()         { *m = Repository{} }
func (m *Repository) String() string { return proto.CompactTextString(m) }
func (*Repository) ProtoMessage()    {}
func (*Repository) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{13}
}
func (m *Repository) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Repository.Unmarshal(m, b)
}
func (m *Repository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Repository.Marshal(b, m, deterministic)
}
func (m *Repository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Repository.Merge(m, src)
}
func (m *Repository) XXX_Size() int {
	return xxx_messageInfo_Repository.Size(m)
}
func (m *Repository) XXX_DiscardUnknown() {
	xxx_messageInfo_Repository.DiscardUnknown(m)
}

var xxx_messageInfo_Repository proto.InternalMessageInfo

func (m *Repository) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Repository) GetDirectoryId() uint64 {
	if m != nil {
		return m.DirectoryId
	}
	return 0
}

func (m *Repository) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

func (m *Repository) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Repository) GetGroupId() uint64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *Repository) GetHtmlUrl() string {
	if m != nil {
		return m.HtmlUrl
	}
	return ""
}

func (m *Repository) GetRepoType() Repository_RepoType {
	if m != nil {
		return m.RepoType
	}
	return Repository_USER
}

type Repositories struct {
	Repositories         []*Repository `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Repositories) Reset()         { *m = Repositories{} }
func (m *Repositories) String() string { return proto.CompactTextString(m) }
func (*Repositories) ProtoMessage()    {}
func (*Repositories) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{14}
}
func (m *Repositories) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Repositories.Unmarshal(m, b)
}
func (m *Repositories) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Repositories.Marshal(b, m, deterministic)
}
func (m *Repositories) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Repositories.Merge(m, src)
}
func (m *Repositories) XXX_Size() int {
	return xxx_messageInfo_Repositories.Size(m)
}
func (m *Repositories) XXX_DiscardUnknown() {
	xxx_messageInfo_Repositories.DiscardUnknown(m)
}

var xxx_messageInfo_Repositories proto.InternalMessageInfo

func (m *Repositories) GetRepositories() []*Repository {
	if m != nil {
		return m.Repositories
	}
	return nil
}

type Directory struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Path                 string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Avatar               string   `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Directory) Reset()         { *m = Directory{} }
func (m *Directory) String() string { return proto.CompactTextString(m) }
func (*Directory) ProtoMessage()    {}
func (*Directory) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{15}
}
func (m *Directory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Directory.Unmarshal(m, b)
}
func (m *Directory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Directory.Marshal(b, m, deterministic)
}
func (m *Directory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Directory.Merge(m, src)
}
func (m *Directory) XXX_Size() int {
	return xxx_messageInfo_Directory.Size(m)
}
func (m *Directory) XXX_DiscardUnknown() {
	xxx_messageInfo_Directory.DiscardUnknown(m)
}

var xxx_messageInfo_Directory proto.InternalMessageInfo

func (m *Directory) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Directory) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Directory) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

type Directories struct {
	Directories          []*Directory `protobuf:"bytes,1,rep,name=directories,proto3" json:"directories,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Directories) Reset()         { *m = Directories{} }
func (m *Directories) String() string { return proto.CompactTextString(m) }
func (*Directories) ProtoMessage()    {}
func (*Directories) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{16}
}
func (m *Directories) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Directories.Unmarshal(m, b)
}
func (m *Directories) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Directories.Marshal(b, m, deterministic)
}
func (m *Directories) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Directories.Merge(m, src)
}
func (m *Directories) XXX_Size() int {
	return xxx_messageInfo_Directories.Size(m)
}
func (m *Directories) XXX_DiscardUnknown() {
	xxx_messageInfo_Directories.DiscardUnknown(m)
}

var xxx_messageInfo_Directories proto.InternalMessageInfo

func (m *Directories) GetDirectories() []*Directory {
	if m != nil {
		return m.Directories
	}
	return nil
}

type RecordRequest struct {
	Id                   uint64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Statuses             []Enrollment_UserStatus `protobuf:"varint,2,rep,packed,name=statuses,proto3,enum=Enrollment_UserStatus" json:"statuses,omitempty"`
	GroupStatuses        []Group_GroupStatus     `protobuf:"varint,3,rep,packed,name=group_statuses,json=groupStatuses,proto3,enum=Group_GroupStatus" json:"group_statuses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RecordRequest) Reset()         { *m = RecordRequest{} }
func (m *RecordRequest) String() string { return proto.CompactTextString(m) }
func (*RecordRequest) ProtoMessage()    {}
func (*RecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{17}
}
func (m *RecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecordRequest.Unmarshal(m, b)
}
func (m *RecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecordRequest.Marshal(b, m, deterministic)
}
func (m *RecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordRequest.Merge(m, src)
}
func (m *RecordRequest) XXX_Size() int {
	return xxx_messageInfo_RecordRequest.Size(m)
}
func (m *RecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordRequest proto.InternalMessageInfo

func (m *RecordRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RecordRequest) GetStatuses() []Enrollment_UserStatus {
	if m != nil {
		return m.Statuses
	}
	return nil
}

func (m *RecordRequest) GetGroupStatuses() []Group_GroupStatus {
	if m != nil {
		return m.GroupStatuses
	}
	return nil
}

// fields can be empty, do not use fields for user validation, use context
// can be used in submission, enrollment and group requests, also in requests with multiple id
// would replace EnrollmentRequest, SubmissionRequest and possible AssignmentRequest
type ActionRequest struct {
	Id                   uint64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId               uint64                `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GroupId              uint64                `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	CourseId             uint64                `protobuf:"varint,4,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	Status               Enrollment_UserStatus `protobuf:"varint,5,opt,name=status,proto3,enum=Enrollment_UserStatus" json:"status,omitempty"`
	GroupStatus          Group_GroupStatus     `protobuf:"varint,6,opt,name=group_status,json=groupStatus,proto3,enum=Group_GroupStatus" json:"group_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ActionRequest) Reset()         { *m = ActionRequest{} }
func (m *ActionRequest) String() string { return proto.CompactTextString(m) }
func (*ActionRequest) ProtoMessage()    {}
func (*ActionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{18}
}
func (m *ActionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActionRequest.Unmarshal(m, b)
}
func (m *ActionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActionRequest.Marshal(b, m, deterministic)
}
func (m *ActionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionRequest.Merge(m, src)
}
func (m *ActionRequest) XXX_Size() int {
	return xxx_messageInfo_ActionRequest.Size(m)
}
func (m *ActionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ActionRequest proto.InternalMessageInfo

func (m *ActionRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ActionRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ActionRequest) GetGroupId() uint64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *ActionRequest) GetCourseId() uint64 {
	if m != nil {
		return m.CourseId
	}
	return 0
}

func (m *ActionRequest) GetStatus() Enrollment_UserStatus {
	if m != nil {
		return m.Status
	}
	return Enrollment_PENDING
}

func (m *ActionRequest) GetGroupStatus() Group_GroupStatus {
	if m != nil {
		return m.GroupStatus
	}
	return Group_PENDING_GROUP
}

type DirectoryRequest struct {
	Provider             string   `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	CourseId             uint64   `protobuf:"varint,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DirectoryRequest) Reset()         { *m = DirectoryRequest{} }
func (m *DirectoryRequest) String() string { return proto.CompactTextString(m) }
func (*DirectoryRequest) ProtoMessage()    {}
func (*DirectoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{19}
}
func (m *DirectoryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DirectoryRequest.Unmarshal(m, b)
}
func (m *DirectoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DirectoryRequest.Marshal(b, m, deterministic)
}
func (m *DirectoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryRequest.Merge(m, src)
}
func (m *DirectoryRequest) XXX_Size() int {
	return xxx_messageInfo_DirectoryRequest.Size(m)
}
func (m *DirectoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryRequest proto.InternalMessageInfo

func (m *DirectoryRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *DirectoryRequest) GetCourseId() uint64 {
	if m != nil {
		return m.CourseId
	}
	return 0
}

type RepositoryRequest struct {
	Id                   uint64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 Repository_RepoType `protobuf:"varint,2,opt,name=type,proto3,enum=Repository_RepoType" json:"type,omitempty"`
	DirectoryId          uint64              `protobuf:"varint,3,opt,name=directory_id,json=directoryId,proto3" json:"directory_id,omitempty"`
	RepositoryId         uint64              `protobuf:"varint,4,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"`
	UserId               uint64              `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CourseId             uint64              `protobuf:"varint,6,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RepositoryRequest) Reset()         { *m = RepositoryRequest{} }
func (m *RepositoryRequest) String() string { return proto.CompactTextString(m) }
func (*RepositoryRequest) ProtoMessage()    {}
func (*RepositoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{20}
}
func (m *RepositoryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RepositoryRequest.Unmarshal(m, b)
}
func (m *RepositoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RepositoryRequest.Marshal(b, m, deterministic)
}
func (m *RepositoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepositoryRequest.Merge(m, src)
}
func (m *RepositoryRequest) XXX_Size() int {
	return xxx_messageInfo_RepositoryRequest.Size(m)
}
func (m *RepositoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RepositoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RepositoryRequest proto.InternalMessageInfo

func (m *RepositoryRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RepositoryRequest) GetType() Repository_RepoType {
	if m != nil {
		return m.Type
	}
	return Repository_USER
}

func (m *RepositoryRequest) GetDirectoryId() uint64 {
	if m != nil {
		return m.DirectoryId
	}
	return 0
}

func (m *RepositoryRequest) GetRepositoryId() uint64 {
	if m != nil {
		return m.RepositoryId
	}
	return 0
}

func (m *RepositoryRequest) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RepositoryRequest) GetCourseId() uint64 {
	if m != nil {
		return m.CourseId
	}
	return 0
}

type Providers struct {
	Providers            []string `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Providers) Reset()         { *m = Providers{} }
func (m *Providers) String() string { return proto.CompactTextString(m) }
func (*Providers) ProtoMessage()    {}
func (*Providers) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{21}
}
func (m *Providers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Providers.Unmarshal(m, b)
}
func (m *Providers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Providers.Marshal(b, m, deterministic)
}
func (m *Providers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Providers.Merge(m, src)
}
func (m *Providers) XXX_Size() int {
	return xxx_messageInfo_Providers.Size(m)
}
func (m *Providers) XXX_DiscardUnknown() {
	xxx_messageInfo_Providers.DiscardUnknown(m)
}

var xxx_messageInfo_Providers proto.InternalMessageInfo

func (m *Providers) GetProviders() []string {
	if m != nil {
		return m.Providers
	}
	return nil
}

type URLResponse struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *URLResponse) Reset()         { *m = URLResponse{} }
func (m *URLResponse) String() string { return proto.CompactTextString(m) }
func (*URLResponse) ProtoMessage()    {}
func (*URLResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{22}
}
func (m *URLResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_URLResponse.Unmarshal(m, b)
}
func (m *URLResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_URLResponse.Marshal(b, m, deterministic)
}
func (m *URLResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URLResponse.Merge(m, src)
}
func (m *URLResponse) XXX_Size() int {
	return xxx_messageInfo_URLResponse.Size(m)
}
func (m *URLResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_URLResponse.DiscardUnknown(m)
}

var xxx_messageInfo_URLResponse proto.InternalMessageInfo

func (m *URLResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type StatusCode struct {
	StatusCode           int32    `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusCode) Reset()         { *m = StatusCode{} }
func (m *StatusCode) String() string { return proto.CompactTextString(m) }
func (*StatusCode) ProtoMessage()    {}
func (*StatusCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{23}
}
func (m *StatusCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusCode.Unmarshal(m, b)
}
func (m *StatusCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusCode.Marshal(b, m, deterministic)
}
func (m *StatusCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusCode.Merge(m, src)
}
func (m *StatusCode) XXX_Size() int {
	return xxx_messageInfo_StatusCode.Size(m)
}
func (m *StatusCode) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusCode.DiscardUnknown(m)
}

var xxx_messageInfo_StatusCode proto.InternalMessageInfo

func (m *StatusCode) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a984e8f57169aa1, []int{24}
}
func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("Group_GroupStatus", Group_GroupStatus_name, Group_GroupStatus_value)
	proto.RegisterEnum("Enrollment_UserStatus", Enrollment_UserStatus_name, Enrollment_UserStatus_value)
	proto.RegisterEnum("Repository_RepoType", Repository_RepoType_name, Repository_RepoType_value)
	proto.RegisterType((*User)(nil), "User")
	proto.RegisterType((*Users)(nil), "Users")
	proto.RegisterType((*RemoteIdentity)(nil), "RemoteIdentity")
	proto.RegisterType((*Group)(nil), "Group")
	proto.RegisterType((*Groups)(nil), "Groups")
	proto.RegisterType((*Course)(nil), "Course")
	proto.RegisterType((*Courses)(nil), "Courses")
	proto.RegisterType((*Enrollment)(nil), "Enrollment")
	proto.RegisterType((*Enrollments)(nil), "Enrollments")
	proto.RegisterType((*Assignment)(nil), "Assignment")
	proto.RegisterType((*Assignments)(nil), "Assignments")
	proto.RegisterType((*Submission)(nil), "Submission")
	proto.RegisterType((*Submissions)(nil), "Submissions")
	proto.RegisterType((*Repository)(nil), "Repository")
	proto.RegisterType((*Repositories)(nil), "Repositories")
	proto.RegisterType((*Directory)(nil), "Directory")
	proto.RegisterType((*Directories)(nil), "Directories")
	proto.RegisterType((*RecordRequest)(nil), "RecordRequest")
	proto.RegisterType((*ActionRequest)(nil), "ActionRequest")
	proto.RegisterType((*DirectoryRequest)(nil), "DirectoryRequest")
	proto.RegisterType((*RepositoryRequest)(nil), "RepositoryRequest")
	proto.RegisterType((*Providers)(nil), "Providers")
	proto.RegisterType((*URLResponse)(nil), "URLResponse")
	proto.RegisterType((*StatusCode)(nil), "StatusCode")
	proto.RegisterType((*Void)(nil), "Void")
}

func init() { proto.RegisterFile("ag.proto", fileDescriptor_7a984e8f57169aa1) }

var fileDescriptor_7a984e8f57169aa1 = []byte{
	// 1895 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xdd, 0x6e, 0x1b, 0xc7,
	0xf5, 0xe7, 0x37, 0x97, 0x67, 0x49, 0x65, 0x35, 0x7f, 0xc3, 0x61, 0x64, 0xff, 0x2b, 0x79, 0x6c,
	0x04, 0xb2, 0x13, 0xaf, 0x6b, 0x05, 0x31, 0x9a, 0x34, 0x40, 0x41, 0x4b, 0x0c, 0x43, 0xc7, 0x91,
	0x84, 0x21, 0x99, 0x5e, 0x2e, 0x56, 0xdc, 0x11, 0x35, 0x2d, 0xc9, 0x65, 0x76, 0x76, 0x8d, 0xe8,
	0xb6, 0x17, 0xbd, 0x2a, 0x7a, 0xdd, 0x47, 0xe8, 0x0b, 0xf4, 0xbe, 0xf7, 0x7d, 0x80, 0xde, 0xe5,
	0x15, 0x0a, 0x04, 0xe8, 0x7d, 0x31, 0x1f, 0xbb, 0x3b, 0xe4, 0x4a, 0xb4, 0xdd, 0xde, 0x10, 0x33,
	0xbf, 0x39, 0x67, 0xf6, 0x9c, 0xdf, 0xf9, 0x98, 0x43, 0xb0, 0xfc, 0x99, 0xbb, 0x8a, 0xc2, 0x38,
	0xdc, 0x7b, 0x3a, 0x63, 0xf1, 0x55, 0x72, 0xe1, 0x4e, 0xc3, 0xc5, 0xb3, 0x59, 0x38, 0x0b, 0x9f,
	0x49, 0xf8, 0x22, 0xb9, 0x94, 0x3b, 0xb9, 0x91, 0x2b, 0x2d, 0xbe, 0x3f, 0x0b, 0xc3, 0xd9, 0x9c,
	0xe6, 0x52, 0x31, 0x5b, 0x50, 0x1e, 0xfb, 0x8b, 0x95, 0x12, 0xc0, 0x7f, 0xac, 0x40, 0x6d, 0xc2,
	0x69, 0x84, 0x76, 0xa0, 0xc2, 0x82, 0x6e, 0xf9, 0xa0, 0x7c, 0x58, 0x23, 0x15, 0x16, 0xa0, 0x8f,
	0xc0, 0x62, 0xdc, 0xf3, 0x83, 0x05, 0x5b, 0x76, 0x2b, 0x07, 0xe5, 0x43, 0x8b, 0x34, 0x19, 0xef,
	0x89, 0x2d, 0x42, 0x50, 0x5b, 0xfa, 0x0b, 0xda, 0xad, 0x1e, 0x94, 0x0f, 0x5b, 0x44, 0xae, 0xd1,
	0xff, 0x03, 0xf0, 0x38, 0x09, 0xe8, 0x32, 0xf6, 0x58, 0xd0, 0xad, 0xc9, 0x93, 0x96, 0x46, 0x86,
	0x01, 0xba, 0x03, 0x75, 0xba, 0xf0, 0xd9, 0xbc, 0x5b, 0x97, 0x27, 0x6a, 0x23, 0x94, 0xfc, 0x37,
	0x7e, 0xec, 0x47, 0x5e, 0x12, 0xcd, 0xbb, 0x0d, 0xa5, 0xa4, 0x90, 0x49, 0x34, 0x47, 0x5f, 0xc1,
	0x6e, 0x44, 0x17, 0x61, 0x4c, 0x3d, 0x26, 0xae, 0x61, 0x31, 0xa3, 0xbc, 0xdb, 0x3c, 0xa8, 0x1e,
	0xda, 0x47, 0x1f, 0xb8, 0x44, 0x9e, 0x0c, 0xd5, 0xc1, 0x35, 0x71, 0x22, 0x73, 0xcf, 0x28, 0x47,
	0x4f, 0xc1, 0xa6, 0xcb, 0x28, 0x9c, 0xcf, 0x17, 0x74, 0x19, 0xf3, 0xae, 0x25, 0xf5, 0x6c, 0xb7,
	0x9f, 0x61, 0xc4, 0x3c, 0xc7, 0x8f, 0xa0, 0x2e, 0x78, 0xe0, 0xe8, 0x1e, 0xd4, 0x13, 0xb1, 0xe8,
	0x96, 0xa5, 0x46, 0xdd, 0x15, 0x30, 0x51, 0x18, 0xfe, 0x77, 0x19, 0x76, 0xd6, 0xbf, 0x5c, 0x20,
	0xee, 0x15, 0x58, 0xab, 0x28, 0x7c, 0xc3, 0x02, 0x1a, 0x49, 0xe2, 0x5a, 0x2f, 0xdd, 0x9f, 0x7f,
	0xda, 0x7f, 0x32, 0x0b, 0xa3, 0xc5, 0x97, 0x38, 0x59, 0xb2, 0x1f, 0x12, 0xea, 0xb1, 0x65, 0x40,
	0x7f, 0xfc, 0x32, 0x61, 0x81, 0x97, 0x8a, 0x7a, 0x99, 0xa7, 0x98, 0x64, 0xfa, 0xe8, 0x5b, 0x68,
	0x65, 0xb8, 0xa4, 0xbb, 0xf6, 0xfe, 0x97, 0xa5, 0xc4, 0xa0, 0x07, 0xd0, 0xf6, 0xa7, 0x53, 0xca,
	0xb9, 0x17, 0x87, 0xbf, 0xa7, 0x4b, 0x1d, 0x24, 0x5b, 0x61, 0x63, 0x01, 0xa1, 0x0f, 0xa1, 0x29,
	0xfc, 0x14, 0x5f, 0xab, 0x4b, 0x87, 0x1a, 0x62, 0x3b, 0x0c, 0xf0, 0xbf, 0x2a, 0x50, 0x1f, 0x44,
	0x61, 0xb2, 0x2a, 0xb8, 0xdb, 0xd3, 0xc9, 0xa0, 0x5c, 0x7d, 0xfa, 0xf3, 0x4f, 0xfb, 0x8f, 0x6f,
	0xb0, 0x8e, 0x05, 0x3f, 0x7a, 0x1a, 0x98, 0x89, 0x6b, 0x3c, 0xa1, 0x83, 0x75, 0xee, 0xbc, 0x82,
	0xd6, 0x34, 0x4c, 0x22, 0x6e, 0x78, 0xf9, 0x9e, 0xf7, 0x58, 0x4a, 0x7f, 0x18, 0xa0, 0x27, 0xd0,
	0xe0, 0xb1, 0x1f, 0x27, 0x5c, 0xba, 0xb7, 0x73, 0x84, 0x5c, 0x69, 0xb6, 0xfa, 0x1d, 0xc9, 0x13,
	0xa2, 0x25, 0xf2, 0x48, 0xd7, 0x8b, 0x91, 0xde, 0x4c, 0x9f, 0xc6, 0x5b, 0xd2, 0xe7, 0x0c, 0x6c,
	0xe3, 0x13, 0x68, 0x17, 0x3a, 0xe7, 0xfd, 0xd3, 0x93, 0xe1, 0xe9, 0xc0, 0x1b, 0x90, 0xb3, 0xc9,
	0xb9, 0x53, 0x42, 0x08, 0x76, 0x48, 0xff, 0x55, 0xff, 0x78, 0xdc, 0x3f, 0xd1, 0x58, 0x19, 0xb5,
	0xc1, 0xea, 0x9d, 0x9f, 0x93, 0xb3, 0xef, 0xfb, 0x27, 0x4e, 0x05, 0xd9, 0xd0, 0x3c, 0xe9, 0xbf,
	0xee, 0x8f, 0xfb, 0x27, 0x4e, 0x15, 0x1f, 0x42, 0x43, 0x5e, 0xc8, 0xd1, 0x2f, 0xa0, 0x21, 0x7d,
	0x4d, 0x33, 0xb2, 0xa1, 0x9c, 0x21, 0x1a, 0xc5, 0x7f, 0xa8, 0x42, 0xe3, 0x58, 0xfa, 0x5f, 0x08,
	0xce, 0x63, 0x70, 0x14, 0x33, 0xd3, 0x88, 0xfa, 0x71, 0x28, 0x03, 0x5b, 0x91, 0xa7, 0x1f, 0xac,
	0xe1, 0xc3, 0xe0, 0xc6, 0xa2, 0x46, 0x50, 0x9b, 0x86, 0x01, 0xd5, 0x99, 0x22, 0xd7, 0x02, 0xbb,
	0xa6, 0x7e, 0x24, 0xf3, 0xa3, 0x43, 0xe4, 0x1a, 0x39, 0x50, 0x8d, 0xfd, 0x99, 0x2e, 0x60, 0xb1,
	0x44, 0x7b, 0x46, 0x11, 0x34, 0x25, 0x9c, 0x27, 0xf5, 0x03, 0x68, 0x07, 0x2c, 0xa2, 0xd3, 0x38,
	0x8c, 0xae, 0x85, 0x41, 0x96, 0x34, 0xc8, 0xce, 0xb0, 0x61, 0x80, 0x8e, 0xc0, 0x52, 0xe4, 0xd2,
	0xa0, 0xdb, 0x92, 0x71, 0xbc, 0x6b, 0x30, 0x2f, 0xe3, 0xa4, 0x63, 0x99, 0xc9, 0x6d, 0x06, 0x0c,
	0xb6, 0x07, 0x4c, 0x88, 0xfb, 0x9c, 0xb3, 0xd9, 0x52, 0x89, 0xb7, 0xb5, 0x78, 0x2f, 0xc3, 0x88,
	0x79, 0x6e, 0x04, 0xa1, 0x73, 0x63, 0x10, 0x3e, 0x85, 0xa6, 0x8a, 0x01, 0x47, 0x0f, 0xb2, 0xa5,
	0x0e, 0x58, 0xd3, 0x55, 0x7b, 0x92, 0xe2, 0xf8, 0x2f, 0x55, 0x80, 0xdc, 0xb0, 0x1b, 0x5a, 0x88,
	0x51, 0x10, 0x95, 0xff, 0xad, 0x20, 0xbe, 0xce, 0x4b, 0xfa, 0xbf, 0x2a, 0x2d, 0xdd, 0x01, 0xc4,
	0x7b, 0xa0, 0x60, 0xdd, 0xde, 0x6b, 0xa4, 0x29, 0xf7, 0xf2, 0xa8, 0x26, 0x84, 0x64, 0x4a, 0x64,
	0x65, 0x24, 0x21, 0xb4, 0x0f, 0x0d, 0x65, 0x89, 0x4c, 0x0e, 0x83, 0x0a, 0x0d, 0xa3, 0xfb, 0x50,
	0x97, 0xd7, 0xc8, 0x2c, 0xc9, 0x69, 0x55, 0x20, 0x72, 0xb3, 0x6a, 0xb6, 0xb6, 0x66, 0x81, 0x96,
	0xc2, 0x3d, 0x80, 0x1c, 0x15, 0xf5, 0xa4, 0x8b, 0xd0, 0x29, 0x89, 0x52, 0x4b, 0xcb, 0xcf, 0x29,
	0x8b, 0xa3, 0xd1, 0x78, 0x72, 0xd2, 0x3f, 0x1d, 0xab, 0xba, 0x1b, 0xf7, 0x7b, 0xc7, 0xdf, 0xf4,
	0x89, 0x53, 0xc5, 0x5f, 0x81, 0xdd, 0x5f, 0x4f, 0x13, 0x33, 0xab, 0xca, 0x6f, 0x69, 0x03, 0x7f,
	0xad, 0x00, 0xe4, 0x29, 0x54, 0x08, 0xec, 0xbd, 0x42, 0x60, 0x8d, 0x48, 0xdd, 0x54, 0x81, 0x7b,
	0x60, 0xcd, 0xfd, 0xe5, 0x2c, 0xf1, 0x67, 0x69, 0x15, 0x66, 0x7b, 0xf4, 0x02, 0xac, 0x80, 0xfa,
	0xc1, 0x9c, 0x2d, 0xa9, 0xa6, 0x7e, 0xcf, 0x55, 0xcf, 0xbd, 0x9b, 0x3e, 0xf7, 0xee, 0x38, 0x7d,
	0xee, 0x49, 0x26, 0x2b, 0xdf, 0x81, 0x24, 0x0e, 0x3d, 0x7f, 0x25, 0x4a, 0x52, 0x45, 0xc6, 0x22,
	0xb6, 0xc0, 0x7a, 0x0a, 0x12, 0xcf, 0x75, 0x18, 0xa5, 0xb5, 0xdb, 0x21, 0x6a, 0x83, 0xf6, 0xc1,
	0x66, 0x5c, 0x25, 0xc7, 0xdc, 0xbf, 0x90, 0x21, 0xb1, 0x08, 0x30, 0x3e, 0xd0, 0x08, 0xfa, 0x04,
	0x80, 0x27, 0x17, 0x0b, 0xc6, 0x39, 0x0b, 0x97, 0xb2, 0x70, 0x05, 0x57, 0xa3, 0x0c, 0x22, 0xc6,
	0xb1, 0x20, 0xba, 0x67, 0x14, 0xd8, 0x46, 0x3d, 0x96, 0xb7, 0xd7, 0x23, 0xfe, 0x53, 0x05, 0x20,
	0xbf, 0xb8, 0x40, 0xf4, 0x43, 0xe8, 0xe4, 0xd2, 0x39, 0xd9, 0xed, 0x1c, 0x1c, 0x06, 0xe6, 0x6b,
	0x57, 0x35, 0x5f, 0xbb, 0x6d, 0xb9, 0x7e, 0x07, 0xea, 0x7c, 0x1a, 0x46, 0x54, 0xf7, 0x3f, 0xb5,
	0x11, 0x9f, 0x93, 0x0b, 0x2f, 0xbc, 0xf8, 0x1d, 0x9d, 0xca, 0xe7, 0x42, 0xc4, 0xaa, 0x2d, 0xc1,
	0x33, 0x85, 0x89, 0x69, 0xe7, 0x22, 0x61, 0xf3, 0xc0, 0x63, 0xcb, 0xcb, 0x50, 0x77, 0xc5, 0x96,
	0x44, 0x86, 0xcb, 0xcb, 0x50, 0xb0, 0x3b, 0x0d, 0x17, 0x0b, 0x16, 0x7b, 0x57, 0x3e, 0xbf, 0x92,
	0xec, 0xb6, 0x08, 0x28, 0xe8, 0x1b, 0x9f, 0x5f, 0x89, 0x5c, 0xd0, 0x21, 0x53, 0x4d, 0xd1, 0x22,
	0xd9, 0x5e, 0x90, 0x99, 0xb3, 0x21, 0xc9, 0xcc, 0x99, 0xce, 0xc9, 0x34, 0x22, 0x61, 0x9e, 0xe3,
	0xbf, 0x55, 0x00, 0x08, 0x5d, 0x85, 0x9c, 0x89, 0xfe, 0x5b, 0x20, 0x73, 0xb3, 0x61, 0x57, 0x8a,
	0x0d, 0xfb, 0x21, 0x74, 0xa2, 0xec, 0x82, 0x9c, 0xd0, 0x76, 0x0e, 0xae, 0xf3, 0x5d, 0xbb, 0x95,
	0xef, 0xfa, 0x66, 0x6f, 0xb1, 0xae, 0xe2, 0xc5, 0xdc, 0x18, 0x10, 0x9b, 0x62, 0x2f, 0xc6, 0xc3,
	0xe7, 0x62, 0x38, 0x5a, 0x85, 0x5e, 0x7c, 0xbd, 0xa2, 0x92, 0xce, 0x9d, 0xa3, 0x3b, 0x6e, 0xee,
	0x86, 0x5c, 0x8e, 0xaf, 0x57, 0x54, 0x8c, 0x40, 0x6a, 0x85, 0xbf, 0x03, 0x2b, 0x45, 0x91, 0x05,
	0xb5, 0xc9, 0xa8, 0x4f, 0x9c, 0x12, 0xda, 0x01, 0xe8, 0x8d, 0x46, 0xc3, 0xc1, 0xe9, 0x77, 0xa2,
	0x1f, 0x94, 0x51, 0x0b, 0xea, 0xe3, 0xfe, 0x68, 0x3c, 0x72, 0x2a, 0xa2, 0x6b, 0x8c, 0xce, 0x5e,
	0x4f, 0xc6, 0xc3, 0xb3, 0x53, 0xa7, 0x2a, 0x04, 0x8f, 0xcf, 0x26, 0x64, 0xd4, 0x1f, 0x9e, 0x7e,
	0x7d, 0xe6, 0xd4, 0xf0, 0x6f, 0xa0, 0x9d, 0x7d, 0x4f, 0x8c, 0x9c, 0xcf, 0x20, 0x77, 0x98, 0xd1,
	0x9c, 0xf7, 0xdc, 0x28, 0xb2, 0x26, 0x80, 0x07, 0xd0, 0x3a, 0x49, 0x59, 0x2c, 0xd0, 0x8e, 0xa0,
	0xb6, 0xf2, 0xe3, 0x2b, 0x35, 0x59, 0x11, 0xb9, 0x46, 0x77, 0xa1, 0xa1, 0xe6, 0x63, 0xdd, 0x25,
	0xf4, 0x0e, 0xff, 0x1a, 0xec, 0xf4, 0x22, 0x61, 0xc8, 0xa7, 0x90, 0x45, 0x27, 0xb7, 0x03, 0xdc,
	0xec, 0x5b, 0xc4, 0x3c, 0xc6, 0x7f, 0x2e, 0x43, 0x87, 0xd0, 0x69, 0x18, 0x05, 0x84, 0xfe, 0x90,
	0x50, 0x5e, 0xec, 0x5b, 0x47, 0x60, 0xa9, 0x0e, 0x4b, 0x79, 0xb7, 0x72, 0x50, 0xdd, 0xf6, 0x1e,
	0xa7, 0x72, 0xe8, 0x0b, 0xd8, 0x51, 0x41, 0xcd, 0x34, 0xab, 0x52, 0xf3, 0xa6, 0x89, 0xac, 0x33,
	0xcb, 0x37, 0x94, 0xe3, 0x7f, 0x96, 0xa1, 0xd3, 0x9b, 0xc6, 0x22, 0x4f, 0x6f, 0x31, 0xc8, 0x48,
	0xa5, 0xca, 0xad, 0xa9, 0x54, 0x5d, 0x4f, 0xa5, 0xb5, 0xe6, 0x5b, 0xdb, 0x68, 0xbe, 0xf9, 0x4b,
	0x53, 0x7f, 0x97, 0x97, 0x06, 0x7d, 0x0e, 0x6d, 0xd3, 0x3b, 0x99, 0x9b, 0x37, 0xfb, 0x66, 0x1b,
	0xbe, 0xe1, 0x6f, 0xc1, 0xc9, 0x83, 0xa0, 0x7d, 0x33, 0x67, 0xa5, 0xf2, 0xc6, 0xac, 0xb4, 0xed,
	0xc1, 0xc0, 0xff, 0x28, 0xc3, 0xae, 0x91, 0x5a, 0xb7, 0x50, 0x75, 0x08, 0x35, 0x59, 0x21, 0x95,
	0x2d, 0x15, 0x22, 0x25, 0x0a, 0x75, 0x5e, 0x7d, 0x87, 0x3a, 0xaf, 0x6d, 0xaf, 0xf3, 0xb5, 0x7f,
	0x11, 0xeb, 0xde, 0x34, 0x36, 0xbc, 0x79, 0x0c, 0xad, 0x73, 0xed, 0x36, 0x47, 0xf7, 0xa1, 0x95,
	0x72, 0xa0, 0xd2, 0xb7, 0x45, 0x72, 0x00, 0xef, 0x83, 0x3d, 0x21, 0xaf, 0x09, 0xe5, 0xab, 0x70,
	0xc9, 0xa9, 0x18, 0x3f, 0x45, 0x7b, 0x50, 0xdc, 0x89, 0x25, 0x7e, 0x0a, 0xa0, 0x08, 0x3f, 0x16,
	0x23, 0xeb, 0x3e, 0xd8, 0x2a, 0x4a, 0x9e, 0x9c, 0x66, 0x85, 0x5c, 0x9d, 0x00, 0xcf, 0x04, 0x70,
	0x03, 0x6a, 0xdf, 0x87, 0x2c, 0x38, 0xfa, 0x3b, 0xc0, 0x6e, 0x2f, 0x89, 0xc3, 0x59, 0xe4, 0x07,
	0x34, 0x1a, 0xd1, 0xe8, 0x0d, 0x9b, 0x52, 0xf4, 0x11, 0x34, 0x07, 0x34, 0x1e, 0xd1, 0xf9, 0x25,
	0xaa, 0xbb, 0x42, 0x6e, 0x4f, 0x8d, 0x38, 0xb8, 0x84, 0xb0, 0x3c, 0x52, 0xff, 0x9f, 0xdd, 0xb5,
	0x12, 0xca, 0x65, 0xee, 0x81, 0xa5, 0x65, 0x78, 0xaa, 0xdf, 0x90, 0x67, 0x1c, 0x97, 0xd0, 0x7d,
	0x80, 0xc9, 0x2a, 0xf0, 0x63, 0x2a, 0xef, 0x50, 0x3a, 0xb9, 0xea, 0x23, 0xa9, 0xaa, 0xff, 0x77,
	0x6d, 0xdc, 0xaf, 0x27, 0x25, 0x5c, 0x42, 0x9f, 0xc1, 0x87, 0xa9, 0xd4, 0xcb, 0x6b, 0xa1, 0xd9,
	0x5b, 0x06, 0xe9, 0xff, 0x01, 0x77, 0xad, 0x8c, 0x0c, 0xa5, 0x8f, 0xa1, 0x95, 0x2a, 0xf1, 0xc2,
	0xdd, 0x4d, 0x25, 0x26, 0x0c, 0xdc, 0x07, 0xfb, 0x58, 0xfc, 0x47, 0xa0, 0xca, 0x0a, 0x7d, 0x81,
	0x71, 0xd1, 0x23, 0xb0, 0x95, 0x07, 0xeb, 0x02, 0xb6, 0x9b, 0x07, 0x00, 0x97, 0xd0, 0x13, 0xd8,
	0x35, 0xa4, 0xf4, 0x7c, 0x76, 0x8b, 0xec, 0x23, 0xb0, 0x4f, 0xe8, 0x9c, 0xbe, 0xe5, 0x46, 0xe5,
	0x40, 0xe6, 0xe7, 0xa6, 0x03, 0xea, 0x40, 0x3a, 0x00, 0x99, 0x5c, 0x16, 0x00, 0xcb, 0x4d, 0x27,
	0xf1, 0x12, 0x7a, 0x01, 0xdd, 0x5c, 0xe0, 0xb7, 0x2c, 0xbe, 0x32, 0x07, 0xf3, 0x8d, 0x7b, 0x4d,
	0xbd, 0x2f, 0x24, 0xed, 0x6a, 0x2f, 0x1e, 0xf0, 0x68, 0xe1, 0x0b, 0xaa, 0x27, 0xe4, 0x75, 0x41,
	0xad, 0xed, 0x1a, 0xe9, 0x2a, 0xd3, 0xa6, 0xad, 0x48, 0xd5, 0xe6, 0xa7, 0xe6, 0x9a, 0x76, 0x7f,
	0x0c, 0x6d, 0xc5, 0xd8, 0xa6, 0xcc, 0x06, 0x0f, 0xcf, 0x44, 0xef, 0xbe, 0x8c, 0x28, 0xbf, 0xba,
	0x85, 0x8b, 0xb6, 0x31, 0x43, 0x09, 0xbb, 0x7f, 0x05, 0x77, 0x07, 0x34, 0x36, 0x66, 0xdc, 0x97,
	0xd7, 0xb7, 0x6a, 0x1a, 0x52, 0xb8, 0x84, 0x9e, 0x83, 0xa3, 0xcc, 0x5e, 0x63, 0x68, 0x3d, 0xc3,
	0x36, 0xac, 0x7b, 0x0e, 0x8e, 0xf2, 0xe2, 0xdd, 0x55, 0x7e, 0x09, 0x3b, 0xa2, 0xdc, 0x8c, 0x69,
	0x66, 0x53, 0xa1, 0x6d, 0x0c, 0x32, 0xc2, 0x2e, 0x17, 0x3a, 0x6b, 0x1a, 0x05, 0x47, 0xcc, 0xc9,
	0x07, 0x97, 0xd0, 0xe7, 0xf0, 0x7f, 0x69, 0xee, 0xbf, 0xcf, 0x67, 0x3e, 0x49, 0x7d, 0xd9, 0xf2,
	0x25, 0x95, 0x5f, 0x99, 0x17, 0xe6, 0x80, 0xfb, 0xb6, 0xb8, 0xbc, 0x00, 0x67, 0x40, 0xe3, 0xbc,
	0x3b, 0x8b, 0x44, 0x42, 0x6e, 0xa1, 0xbf, 0x17, 0x92, 0xe9, 0x21, 0xb4, 0x07, 0x34, 0xce, 0x5b,
	0xa7, 0x4e, 0x71, 0x70, 0x33, 0x48, 0xf6, 0x08, 0x61, 0x8e, 0x39, 0x22, 0xec, 0xba, 0x9b, 0x0f,
	0xd1, 0x5e, 0xdb, 0x35, 0x04, 0x70, 0x09, 0x1d, 0x49, 0x5e, 0x8d, 0xc1, 0xf0, 0x26, 0x73, 0xcc,
	0xe9, 0x06, 0x97, 0x2e, 0x1a, 0xf2, 0xaf, 0xc7, 0x67, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x15,
	0xba, 0x31, 0xe7, 0xb2, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AutograderServiceClient is the client API for AutograderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AutograderServiceClient interface {
	GetSelf(ctx context.Context, in *Void, opts ...grpc.CallOption) (*User, error)
	GetUser(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*User, error)
	GetUsers(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Users, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	GetGroup(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*Group, error)
	GetGroupByUserAndCourse(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*Group, error)
	GetGroups(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*Groups, error)
	CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*StatusCode, error)
	UpdateGroupStatus(ctx context.Context, in *Group, opts ...grpc.CallOption) (*StatusCode, error)
	DeleteGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*StatusCode, error)
	GetCourse(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*Course, error)
	GetCourses(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Courses, error)
	GetCoursesWithEnrollment(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*Courses, error)
	GetCourseInformationURL(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*URLResponse, error)
	CreateCourse(ctx context.Context, in *Course, opts ...grpc.CallOption) (*Course, error)
	UpdateCourse(ctx context.Context, in *Course, opts ...grpc.CallOption) (*StatusCode, error)
	RefreshCourse(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*Assignments, error)
	GetEnrollmentsByCourse(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*Enrollments, error)
	CreateEnrollment(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*StatusCode, error)
	UpdateEnrollment(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*StatusCode, error)
	GetSubmissions(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*Submissions, error)
	GetSubmission(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*Submission, error)
	GetGroupSubmissions(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*Submissions, error)
	UpdateSubmission(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*Void, error)
	GetAssignments(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*Assignments, error)
	GetRepositoryURL(ctx context.Context, in *RepositoryRequest, opts ...grpc.CallOption) (*URLResponse, error)
	GetProviders(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Providers, error)
	GetDirectories(ctx context.Context, in *DirectoryRequest, opts ...grpc.CallOption) (*Directories, error)
	GetRepository(ctx context.Context, in *RepositoryRequest, opts ...grpc.CallOption) (*Repository, error)
}

type autograderServiceClient struct {
	cc *grpc.ClientConn
}

func NewAutograderServiceClient(cc *grpc.ClientConn) AutograderServiceClient {
	return &autograderServiceClient{cc}
}

func (c *autograderServiceClient) GetSelf(ctx context.Context, in *Void, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/AutograderService/GetSelf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetUser(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/AutograderService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetUsers(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/AutograderService/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/AutograderService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetGroup(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/AutograderService/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetGroupByUserAndCourse(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/AutograderService/GetGroupByUserAndCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetGroups(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*Groups, error) {
	out := new(Groups)
	err := c.cc.Invoke(ctx, "/AutograderService/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/AutograderService/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*StatusCode, error) {
	out := new(StatusCode)
	err := c.cc.Invoke(ctx, "/AutograderService/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) UpdateGroupStatus(ctx context.Context, in *Group, opts ...grpc.CallOption) (*StatusCode, error) {
	out := new(StatusCode)
	err := c.cc.Invoke(ctx, "/AutograderService/UpdateGroupStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) DeleteGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*StatusCode, error) {
	out := new(StatusCode)
	err := c.cc.Invoke(ctx, "/AutograderService/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetCourse(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*Course, error) {
	out := new(Course)
	err := c.cc.Invoke(ctx, "/AutograderService/GetCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetCourses(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Courses, error) {
	out := new(Courses)
	err := c.cc.Invoke(ctx, "/AutograderService/GetCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetCoursesWithEnrollment(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*Courses, error) {
	out := new(Courses)
	err := c.cc.Invoke(ctx, "/AutograderService/GetCoursesWithEnrollment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetCourseInformationURL(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*URLResponse, error) {
	out := new(URLResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/GetCourseInformationURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) CreateCourse(ctx context.Context, in *Course, opts ...grpc.CallOption) (*Course, error) {
	out := new(Course)
	err := c.cc.Invoke(ctx, "/AutograderService/CreateCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) UpdateCourse(ctx context.Context, in *Course, opts ...grpc.CallOption) (*StatusCode, error) {
	out := new(StatusCode)
	err := c.cc.Invoke(ctx, "/AutograderService/UpdateCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) RefreshCourse(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*Assignments, error) {
	out := new(Assignments)
	err := c.cc.Invoke(ctx, "/AutograderService/RefreshCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetEnrollmentsByCourse(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*Enrollments, error) {
	out := new(Enrollments)
	err := c.cc.Invoke(ctx, "/AutograderService/GetEnrollmentsByCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) CreateEnrollment(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*StatusCode, error) {
	out := new(StatusCode)
	err := c.cc.Invoke(ctx, "/AutograderService/CreateEnrollment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) UpdateEnrollment(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*StatusCode, error) {
	out := new(StatusCode)
	err := c.cc.Invoke(ctx, "/AutograderService/UpdateEnrollment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetSubmissions(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*Submissions, error) {
	out := new(Submissions)
	err := c.cc.Invoke(ctx, "/AutograderService/GetSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetSubmission(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*Submission, error) {
	out := new(Submission)
	err := c.cc.Invoke(ctx, "/AutograderService/GetSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetGroupSubmissions(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*Submissions, error) {
	out := new(Submissions)
	err := c.cc.Invoke(ctx, "/AutograderService/GetGroupSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) UpdateSubmission(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/AutograderService/UpdateSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetAssignments(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*Assignments, error) {
	out := new(Assignments)
	err := c.cc.Invoke(ctx, "/AutograderService/GetAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetRepositoryURL(ctx context.Context, in *RepositoryRequest, opts ...grpc.CallOption) (*URLResponse, error) {
	out := new(URLResponse)
	err := c.cc.Invoke(ctx, "/AutograderService/GetRepositoryURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetProviders(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Providers, error) {
	out := new(Providers)
	err := c.cc.Invoke(ctx, "/AutograderService/GetProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetDirectories(ctx context.Context, in *DirectoryRequest, opts ...grpc.CallOption) (*Directories, error) {
	out := new(Directories)
	err := c.cc.Invoke(ctx, "/AutograderService/GetDirectories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autograderServiceClient) GetRepository(ctx context.Context, in *RepositoryRequest, opts ...grpc.CallOption) (*Repository, error) {
	out := new(Repository)
	err := c.cc.Invoke(ctx, "/AutograderService/GetRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutograderServiceServer is the server API for AutograderService service.
type AutograderServiceServer interface {
	GetSelf(context.Context, *Void) (*User, error)
	GetUser(context.Context, *RecordRequest) (*User, error)
	GetUsers(context.Context, *Void) (*Users, error)
	UpdateUser(context.Context, *User) (*User, error)
	GetGroup(context.Context, *RecordRequest) (*Group, error)
	GetGroupByUserAndCourse(context.Context, *ActionRequest) (*Group, error)
	GetGroups(context.Context, *RecordRequest) (*Groups, error)
	CreateGroup(context.Context, *Group) (*Group, error)
	UpdateGroup(context.Context, *Group) (*StatusCode, error)
	UpdateGroupStatus(context.Context, *Group) (*StatusCode, error)
	DeleteGroup(context.Context, *Group) (*StatusCode, error)
	GetCourse(context.Context, *RecordRequest) (*Course, error)
	GetCourses(context.Context, *Void) (*Courses, error)
	GetCoursesWithEnrollment(context.Context, *RecordRequest) (*Courses, error)
	GetCourseInformationURL(context.Context, *RecordRequest) (*URLResponse, error)
	CreateCourse(context.Context, *Course) (*Course, error)
	UpdateCourse(context.Context, *Course) (*StatusCode, error)
	RefreshCourse(context.Context, *RecordRequest) (*Assignments, error)
	GetEnrollmentsByCourse(context.Context, *RecordRequest) (*Enrollments, error)
	CreateEnrollment(context.Context, *ActionRequest) (*StatusCode, error)
	UpdateEnrollment(context.Context, *ActionRequest) (*StatusCode, error)
	GetSubmissions(context.Context, *ActionRequest) (*Submissions, error)
	GetSubmission(context.Context, *RecordRequest) (*Submission, error)
	GetGroupSubmissions(context.Context, *ActionRequest) (*Submissions, error)
	UpdateSubmission(context.Context, *RecordRequest) (*Void, error)
	GetAssignments(context.Context, *RecordRequest) (*Assignments, error)
	GetRepositoryURL(context.Context, *RepositoryRequest) (*URLResponse, error)
	GetProviders(context.Context, *Void) (*Providers, error)
	GetDirectories(context.Context, *DirectoryRequest) (*Directories, error)
	GetRepository(context.Context, *RepositoryRequest) (*Repository, error)
}

func RegisterAutograderServiceServer(s *grpc.Server, srv AutograderServiceServer) {
	s.RegisterService(&_AutograderService_serviceDesc, srv)
}

func _AutograderService_GetSelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetSelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetSelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetSelf(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetUser(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetUsers(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetGroup(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetGroupByUserAndCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetGroupByUserAndCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetGroupByUserAndCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetGroupByUserAndCourse(ctx, req.(*ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetGroups(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).CreateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).UpdateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_UpdateGroupStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).UpdateGroupStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/UpdateGroupStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).UpdateGroupStatus(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).DeleteGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetCourse(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetCourses(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetCoursesWithEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetCoursesWithEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetCoursesWithEnrollment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetCoursesWithEnrollment(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetCourseInformationURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetCourseInformationURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetCourseInformationURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetCourseInformationURL(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_CreateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Course)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).CreateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/CreateCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).CreateCourse(ctx, req.(*Course))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_UpdateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Course)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).UpdateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/UpdateCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).UpdateCourse(ctx, req.(*Course))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_RefreshCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).RefreshCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/RefreshCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).RefreshCourse(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetEnrollmentsByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetEnrollmentsByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetEnrollmentsByCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetEnrollmentsByCourse(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_CreateEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).CreateEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/CreateEnrollment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).CreateEnrollment(ctx, req.(*ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_UpdateEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).UpdateEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/UpdateEnrollment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).UpdateEnrollment(ctx, req.(*ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetSubmissions(ctx, req.(*ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetSubmission(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetGroupSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetGroupSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetGroupSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetGroupSubmissions(ctx, req.(*ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_UpdateSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).UpdateSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/UpdateSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).UpdateSubmission(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetAssignments(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetRepositoryURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetRepositoryURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetRepositoryURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetRepositoryURL(ctx, req.(*RepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetProviders(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetDirectories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetDirectories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetDirectories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetDirectories(ctx, req.(*DirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutograderService_GetRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutograderServiceServer).GetRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AutograderService/GetRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutograderServiceServer).GetRepository(ctx, req.(*RepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AutograderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "AutograderService",
	HandlerType: (*AutograderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSelf",
			Handler:    _AutograderService_GetSelf_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AutograderService_GetUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _AutograderService_GetUsers_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AutograderService_UpdateUser_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _AutograderService_GetGroup_Handler,
		},
		{
			MethodName: "GetGroupByUserAndCourse",
			Handler:    _AutograderService_GetGroupByUserAndCourse_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _AutograderService_GetGroups_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _AutograderService_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _AutograderService_UpdateGroup_Handler,
		},
		{
			MethodName: "UpdateGroupStatus",
			Handler:    _AutograderService_UpdateGroupStatus_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _AutograderService_DeleteGroup_Handler,
		},
		{
			MethodName: "GetCourse",
			Handler:    _AutograderService_GetCourse_Handler,
		},
		{
			MethodName: "GetCourses",
			Handler:    _AutograderService_GetCourses_Handler,
		},
		{
			MethodName: "GetCoursesWithEnrollment",
			Handler:    _AutograderService_GetCoursesWithEnrollment_Handler,
		},
		{
			MethodName: "GetCourseInformationURL",
			Handler:    _AutograderService_GetCourseInformationURL_Handler,
		},
		{
			MethodName: "CreateCourse",
			Handler:    _AutograderService_CreateCourse_Handler,
		},
		{
			MethodName: "UpdateCourse",
			Handler:    _AutograderService_UpdateCourse_Handler,
		},
		{
			MethodName: "RefreshCourse",
			Handler:    _AutograderService_RefreshCourse_Handler,
		},
		{
			MethodName: "GetEnrollmentsByCourse",
			Handler:    _AutograderService_GetEnrollmentsByCourse_Handler,
		},
		{
			MethodName: "CreateEnrollment",
			Handler:    _AutograderService_CreateEnrollment_Handler,
		},
		{
			MethodName: "UpdateEnrollment",
			Handler:    _AutograderService_UpdateEnrollment_Handler,
		},
		{
			MethodName: "GetSubmissions",
			Handler:    _AutograderService_GetSubmissions_Handler,
		},
		{
			MethodName: "GetSubmission",
			Handler:    _AutograderService_GetSubmission_Handler,
		},
		{
			MethodName: "GetGroupSubmissions",
			Handler:    _AutograderService_GetGroupSubmissions_Handler,
		},
		{
			MethodName: "UpdateSubmission",
			Handler:    _AutograderService_UpdateSubmission_Handler,
		},
		{
			MethodName: "GetAssignments",
			Handler:    _AutograderService_GetAssignments_Handler,
		},
		{
			MethodName: "GetRepositoryURL",
			Handler:    _AutograderService_GetRepositoryURL_Handler,
		},
		{
			MethodName: "GetProviders",
			Handler:    _AutograderService_GetProviders_Handler,
		},
		{
			MethodName: "GetDirectories",
			Handler:    _AutograderService_GetDirectories_Handler,
		},
		{
			MethodName: "GetRepository",
			Handler:    _AutograderService_GetRepository_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ag.proto",
}
